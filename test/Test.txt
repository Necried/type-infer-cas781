a :: () -- with type signature
a = ()


{- Parse this file with the following two commands:
> ghci src/Parser.hs
> runTestFile "test/Test.txt"

This will print out the lexing results (all the tokens)
and the parsing results (a map of declarations, their accompanying
expression, and the type if there was one!)
-}

-- Note: due to a weird lexing quirk, you can't put a comment right at the 
-- start of a file.
{- But single- and multi-line comments should work otherwise!
-}

-- without type signature
b = ()

-- without type signature, but with inline type annotation
b1 = () :: ()

-- lambda function
c :: () -> ()
c = \a -> ()

-- nested lambda functions
d :: () -> () -> ()
d = \a -> \b -> ()

-- function with polymorphism
e :: forall alpha . alpha -> alpha
e = \a -> a

-- function with higher-rank polymorphism
-- btw, yes, we can split across lines as long as things don't touch the
-- left-hand side, like Elm and Haskell :)
f :: 
    a 
    -> forall alpha . alpha
f = 
    \a -> a

-- function application
g :: ()
g = f ()

-- anonymous function application
h :: ()
h = (\a -> a) ()

i = 2

j = 2 + 2

k = 2 + 2 * 3

l = \x -> x + 2

m :: Int -> Int -> Int

m = \y -> \x -> if x + 2 < y then x * 2 else y

n :: forall a . forall b . (a, b) -> a
n = \tup -> 
    let 
      (x,_) = tup
    in
      x

o :: (Int, Int)
o = (1,2)

p :: forall a . forall b . (a, b) -> a
p = \tup -> 
    let 
      (x,_) = tup
    in
      x